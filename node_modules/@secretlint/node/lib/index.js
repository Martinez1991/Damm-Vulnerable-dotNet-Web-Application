"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEngine = void 0;
const core_1 = require("@secretlint/core");
const config_loader_1 = require("@secretlint/config-loader");
const source_creator_1 = require("@secretlint/source-creator");
const formatter_1 = require("@secretlint/formatter");
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const profiler_1 = require("@secretlint/profiler");
const p_map_1 = __importDefault(require("p-map"));
const debug = require("debug")("@secretlint/node");
const isConfigFileJSON = (v) => {
    return "configFileJSON" in v && v.configFileJSON !== undefined;
};
const lintFile = (filePath, config, options) => __awaiter(void 0, void 0, void 0, function* () {
    const rawSource = yield source_creator_1.createRawSource(filePath);
    return core_1.lintSource({
        source: rawSource,
        options: {
            locale: options.locale,
            config: config,
        },
    });
});
const hasErrorMessage = (result) => {
    return result.messages.length > 0;
};
const executeOnContent = ({ content, filePath, config, options, }) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    debug("executeOnContent content: %s", `${content.slice(0, 24)}...`);
    debug("executeOnContent filePath: %s", filePath);
    const result = yield core_1.lintSource({
        source: {
            filePath: filePath,
            content: content,
            ext: path_1.default.extname(filePath),
            contentType: "text",
        },
        options: {
            locale: options.locale,
            config,
        },
    });
    debug("executeOnContent result: %o", result);
    profiler_1.secretLintProfiler.mark({
        type: "@node>format::start",
    });
    const formatter = formatter_1.createFormatter({
        color: (_a = options.color) !== null && _a !== void 0 ? _a : true,
        formatterName: options.formatter,
        terminalLink: (_b = options.terminalLink) !== null && _b !== void 0 ? _b : false,
    });
    const output = formatter.format([result]);
    profiler_1.secretLintProfiler.mark({
        type: "@node>format::end",
    });
    return {
        ok: !hasErrorMessage(result),
        output: output,
    };
});
const executeOnFiles = ({ filePathList, config, options, }) => __awaiter(void 0, void 0, void 0, function* () {
    var _c, _d;
    const mapper = (filePath) => __awaiter(void 0, void 0, void 0, function* () {
        debug("executeOnFiles file: %s", filePath);
        const result = yield lintFile(filePath, config, options);
        debug("executeOnFiles result: %o", result);
        return result;
    });
    const results = yield p_map_1.default(filePathList, mapper, {
        // Avoid: EMFILE: too many open files, uv_cwd
        // https://github.com/secretlint/secretlint/issues/72
        concurrency: os_1.default.cpus().length,
    });
    debug("executeOnFiles result counts: %s", results.length);
    profiler_1.secretLintProfiler.mark({
        type: "@node>format::start",
    });
    const formatter = formatter_1.createFormatter({
        color: (_c = options.color) !== null && _c !== void 0 ? _c : true,
        formatterName: options.formatter,
        terminalLink: (_d = options.terminalLink) !== null && _d !== void 0 ? _d : false,
    });
    const output = formatter.format(results);
    profiler_1.secretLintProfiler.mark({
        type: "@node>format::end",
    });
    const hasErrorAtLeastOne = results.some((result) => {
        return hasErrorMessage(result);
    });
    return {
        ok: !hasErrorAtLeastOne,
        output: output,
    };
});
/**
 * Create SecretLint Engine and return the instance.
 * The engine load config file(.secretlintrc) automatically
 * @param options
 */
const createEngine = (options) => __awaiter(void 0, void 0, void 0, function* () {
    profiler_1.secretLintProfiler.mark({
        type: "@node>load-config::start",
    });
    const loadedResult = (() => {
        if (isConfigFileJSON(options)) {
            debug("Load ConfigFileJSON: %s", options.configFileJSON);
            return config_loader_1.loadPackagesFromRawConfig({
                rawConfig: options.configFileJSON,
            });
        }
        const loadConfigResult = config_loader_1.loadConfig({
            cwd: options.cwd,
            configFilePath: options.configFilePath,
        });
        debug("Loaded ConfigFilePath: %s", loadConfigResult.configFilePath);
        return loadConfigResult;
    })();
    profiler_1.secretLintProfiler.mark({
        type: "@node>load-config::end",
    });
    if (!loadedResult.ok) {
        throw new Error(loadedResult.errors.map((error) => error.stack).join("\n\n"));
    }
    debug("Config: %O", loadedResult.config);
    return {
        /**
         * Lint a content and return the formatted results
         * @param content
         * @param filePath
         */
        executeOnContent: ({ content, filePath }) => {
            debug("executeOnContent content: %s", content);
            debug("executeOnContent filePath: %s", filePath);
            profiler_1.secretLintProfiler.mark({
                type: "@node>execute::start",
            });
            return executeOnContent({
                content,
                filePath,
                config: loadedResult.config,
                options: options,
            }).finally(() => {
                profiler_1.secretLintProfiler.mark({
                    type: "@node>execute::end",
                });
            });
        },
        /**
         * Lint files and return the formatted results
         * @param filePathList
         */
        executeOnFiles: ({ filePathList }) => {
            debug("executeOnFiles file counts: %s", filePathList.length);
            profiler_1.secretLintProfiler.mark({
                type: "@node>execute::start",
            });
            return executeOnFiles({
                filePathList,
                config: loadedResult.config,
                options: options,
            }).finally(() => {
                profiler_1.secretLintProfiler.mark({
                    type: "@node>execute::end",
                });
            });
        },
    };
});
exports.createEngine = createEngine;
//# sourceMappingURL=index.js.map