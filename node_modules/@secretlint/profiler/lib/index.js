"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretLintProfiler = void 0;
class SecretLintProfiler {
    constructor(options) {
        this.entries = [];
        this.measures = [];
        this.executionPromises = [];
        this.waifForExecutionPromises = () => {
            return Promise.all(this.executionPromises).finally(() => {
                this.executionPromises.length = 0;
            });
        };
        this.perf = options.perf;
        const pattern = /(.*?)::end(\|\|.*)?/;
        const observer = new options.PerformanceObserver((items) => {
            const entries = items.getEntries();
            entries.forEach((entry) => {
                if (entry.entryType === "mark") {
                    const match = entry.name.match(pattern);
                    const endIdentifier = match ? match[1] : undefined;
                    const suffix = match && match[2] ? match[2] : "";
                    // if mark already {mark}}::start, measure start to end
                    if (endIdentifier) {
                        const startIdentifier = `${endIdentifier}::start`;
                        this.entries.find((savedEntry) => {
                            return savedEntry.name === startIdentifier;
                        });
                        // create measure
                        if (startIdentifier) {
                            // FIXME: avoid ERR_INVALID_PERFORMANCE_MARK error
                            this.executionPromises.push(Promise.resolve().then(() => {
                                this.perf.measure(endIdentifier + suffix, `${endIdentifier}::start${suffix}`, `${endIdentifier}::end${suffix}`);
                            }));
                        }
                    }
                    this.entries.push(entry);
                }
                else if (entry.entryType === "measure") {
                    this.measures.push(entry);
                }
            });
        });
        observer.observe({ entryTypes: ["mark", "measure"] });
    }
    mark(marker) {
        if ("id" in marker) {
            this.perf.mark(`${marker.type}||${marker.id}`);
        }
        else {
            this.perf.mark(marker.type);
        }
    }
    getEntries() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.waifForExecutionPromises();
            return this.entries;
        });
    }
    getMeasures() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.waifForExecutionPromises();
            return this.measures;
        });
    }
}
exports.SecretLintProfiler = SecretLintProfiler;
//# sourceMappingURL=index.js.map