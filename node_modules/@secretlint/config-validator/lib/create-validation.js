"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const typescript_json_validator_1 = require("typescript-json-validator");
const tsConfig = fs_1.default.readFileSync(path_1.default.join(__dirname, "../../types/tsconfig.json"), "utf-8");
const tsFilePath = path_1.default.join(__dirname, "../../types/src/SecretLintConfigDescriptor.ts");
if (!fs_1.default.existsSync(tsFilePath)) {
    throw new Error(`Not found: ${tsFilePath}`);
}
const parsedResult = typescript_json_validator_1.parse([tsFilePath], tsConfig);
/**
 * Note: isSecretLintConfigDescriptorRule is union type
 * ajv does not work correctly for "rules[0].rules[0].id" case
 */
const create = (name) => {
    const schema = parsedResult.getType(name);
    const validation = typescript_json_validator_1.printSingleTypeValidator(name, true, schema, "@secretlint/types", tsConfig, {
        allErrors: true,
        coerceTypes: "array",
        format: "fast",
        unicode: true,
        uniqueItems: true,
        useDefaults: true
    });
    fs_1.default.writeFileSync(path_1.default.join(__dirname, `${name}-validation.ts`), validation, "utf-8");
};
create("SecretLintConfigDescriptor");
create("SecretLintConfigDescriptorRule");
create("SecretLintConfigDescriptorRulePreset");
//# sourceMappingURL=create-validation.js.map