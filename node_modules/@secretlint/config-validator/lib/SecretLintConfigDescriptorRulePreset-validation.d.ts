import Ajv = require('ajv');
import { SecretLintConfigDescriptorRulePreset } from '@secretlint/types';
export declare const ajv: Ajv.Ajv;
export { SecretLintConfigDescriptorRulePreset };
export declare const SecretLintConfigDescriptorRulePresetSchema: {
    $schema: string;
    definitions: {
        Options: {
            $ref: string;
        };
        Options_1: {
            $ref: string;
        };
        Options_2: {
            type: string;
        };
        Options_3: {
            type: string;
        };
        SecretLintRuleCreator: {
            $ref: string;
        };
        SecretLintRuleCreator_1: {
            $ref: string;
        };
        SecretLintRuleLocalizeMessages: {
            $ref: string;
        };
        SecretLintRulePresetCreator: {
            $ref: string;
        };
        SecretLintRulePresetCreator_1: {
            $ref: string;
        };
        SecretLintRuleSeverityLevel: {
            description: string;
            enum: string[];
            type: string;
        };
        SecretlintCoreSharedOptions: {
            $ref: string;
        };
        __type: {
            additionalProperties: {};
            type: string;
        };
        __type_1: {
            properties: {};
            type: string;
        };
        __type_2: {
            properties: {
                messages: {
                    $ref: string;
                };
                meta: {
                    properties: {
                        docs: {
                            properties: {
                                url: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        id: {
                            type: string;
                        };
                        recommended: {
                            type: string;
                        };
                        supportedContentTypes: {
                            items: {
                                enum: string[];
                                type: string;
                            };
                            type: string;
                        };
                        type: {
                            enum: string[];
                            type: string;
                        };
                    };
                    required: string[];
                    type: string;
                };
            };
            required: string[];
            type: string;
        };
        __type_3: {
            additionalProperties: {
                allOf: ({
                    $ref: string;
                    type?: undefined;
                } | {
                    type: string;
                    $ref?: undefined;
                })[];
            };
            type: string;
        };
        __type_4: {
            properties: {};
            type: string;
        };
        __type_5: {
            properties: {
                meta: {
                    properties: {
                        docs: {
                            properties: {
                                url: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        id: {
                            type: string;
                        };
                        recommended: {
                            type: string;
                        };
                        type: {
                            enum: string[];
                            type: string;
                        };
                    };
                    required: string[];
                    type: string;
                };
            };
            required: string[];
            type: string;
        };
        __type_6: {
            properties: {
                messages: {
                    $ref: string;
                };
                meta: {
                    properties: {
                        docs: {
                            properties: {
                                url: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        id: {
                            type: string;
                        };
                        recommended: {
                            type: string;
                        };
                        supportedContentTypes: {
                            items: {
                                enum: string[];
                                type: string;
                            };
                            type: string;
                        };
                        type: {
                            enum: string[];
                            type: string;
                        };
                    };
                    required: string[];
                    type: string;
                };
            };
            required: string[];
            type: string;
        };
        __type_7: {
            properties: {
                meta: {
                    properties: {
                        docs: {
                            properties: {
                                url: {
                                    type: string;
                                };
                            };
                            required: string[];
                            type: string;
                        };
                        id: {
                            type: string;
                        };
                        recommended: {
                            type: string;
                        };
                        type: {
                            enum: string[];
                            type: string;
                        };
                    };
                    required: string[];
                    type: string;
                };
            };
            required: string[];
            type: string;
        };
        "{[x:string]:SecretLintRuleLocalizeMessageHandler<any>;}": {
            type: string;
        };
    };
    properties: {
        disabled: {
            description: string;
            type: string;
        };
        id: {
            description: string;
            type: string;
        };
        options: {
            $ref: string;
            description: string;
        };
        rule: {
            $ref: string;
            description: string;
        };
        rules: {
            description: string;
            items: {
                properties: {
                    allowMessageIds: {
                        description: string;
                        items: {
                            type: string;
                        };
                        type: string;
                    };
                    disabled: {
                        description: string;
                        type: string;
                    };
                    id: {
                        description: string;
                        type: string;
                    };
                    options: {
                        $ref: string;
                        description: string;
                    };
                    rule: {
                        $ref: string;
                        description: string;
                    };
                    severity: {
                        $ref: string;
                        description: string;
                    };
                };
                required: string[];
                type: string;
            };
            type: string;
        };
    };
    required: string[];
    type: string;
};
export declare type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>;
export declare const isSecretLintConfigDescriptorRulePreset: ValidateFunction<SecretLintConfigDescriptorRulePreset<import("@secretlint/types").SecretLintRulePresetCreatorOptions>>;
export default function validate(value: unknown): SecretLintConfigDescriptorRulePreset;
