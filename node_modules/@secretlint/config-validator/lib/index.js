"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateConfig = exports.validateRawConfig = void 0;
const SecretLintConfigDescriptor_validation_1 = __importDefault(require("./SecretLintConfigDescriptor-validation"));
const SecretLintConfigDescriptorRule_validation_1 = __importDefault(require("./SecretLintConfigDescriptorRule-validation"));
const SecretLintConfigDescriptorRulePreset_validation_1 = __importDefault(require("./SecretLintConfigDescriptorRulePreset-validation"));
/**
 * value should be SecretLintCoreDescriptor
 * @param value
 */
const validateRawConfig = (value) => {
    try {
        if (!Array.isArray(value.rules)) {
            const error = new Error(`secretlintrc should have required 'rules' property.
            
{
    "rules": [
        {
            "id": "secretlint-rule-example"
        }
    ]
}
`);
            return {
                ok: false,
                error,
            };
        }
        SecretLintConfigDescriptor_validation_1.default(value);
        for (const ruleOrPreset of value.rules) {
            // validate as preset
            if ("rules" in ruleOrPreset) {
                const rulePreset = ruleOrPreset;
                try {
                    SecretLintConfigDescriptorRulePreset_validation_1.default(rulePreset);
                }
                catch (error) {
                    const errorMessage = error.message.replace(/SecretLintConfigDescriptorRulePreset/g, ruleOrPreset.id);
                    return {
                        ok: false,
                        error: new Error(errorMessage),
                    };
                }
            }
            else {
                const rule = ruleOrPreset;
                try {
                    SecretLintConfigDescriptorRule_validation_1.default(rule);
                }
                catch (error) {
                    const errorMessage = error.message.replace(/SecretLintConfigDescriptorRule/g, ruleOrPreset.id);
                    return {
                        ok: false,
                        error: new Error(errorMessage),
                    };
                }
            }
        }
        return {
            ok: true,
        };
    }
    catch (error) {
        // SecretLintConfigDescriptor -> secretlintrc
        const errorMessage = error.message.replace(/SecretLintConfigDescriptor/g, "secretlintrc");
        return {
            ok: false,
            error: new Error(errorMessage),
        };
    }
};
exports.validateRawConfig = validateRawConfig;
/**
 * valid config. it is additional check
 * please pass validateRawConfig before it.
 * @param value
 */
const validateConfig = (value) => {
    try {
        for (const ruleOrPreset of value.rules) {
            // validate as preset
            if (!("rules" in ruleOrPreset)) {
                const rule = ruleOrPreset;
                // `allowMessageIds` validation
                if (Array.isArray(rule.allowMessageIds)) {
                    const messageIds = Object.keys(rule.rule.messages);
                    rule.allowMessageIds.forEach((allowMessageId) => {
                        if (!messageIds.includes(allowMessageId)) {
                            throw new Error(`allowMessageIds: ${allowMessageId} is not defined in rule: ${rule.id}`);
                        }
                    });
                }
            }
        }
        return {
            ok: true,
        };
    }
    catch (error) {
        return {
            ok: false,
            error: error,
        };
    }
};
exports.validateConfig = validateConfig;
//# sourceMappingURL=index.js.map