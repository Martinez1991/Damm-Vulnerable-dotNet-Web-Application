// LICENSE : MIT
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.secretlintGetFormatterList = exports.getFormatterList = exports.secretlintCreateFormatter = exports.createFormatter = void 0;
const linter_formatter_1 = require("@textlint/linter-formatter");
const terminal_link_1 = __importDefault(require("terminal-link"));
const module_interop_1 = require("@textlint/module-interop");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
// @ts-expect-error: no @types
const is_file_1 = __importDefault(require("is-file"));
// @ts-expect-error: no @types
const try_resolve_1 = __importDefault(require("try-resolve"));
const debug = require("debug")("@secretlint/formatter");
/**
 * Convert secretlint result to textlint result for formatter
 * @param secretLintCoreResult
 */
const convertSecretLintResultToTextlintResult = (secretLintCoreResult, { enableTerminalLink }) => {
    return {
        filePath: secretLintCoreResult.filePath,
        messages: secretLintCoreResult.messages.map((message) => {
            const severityLevel = message.severity === "info"
                ? 0
                : message.severity === "warning"
                    ? 1
                    : message.severity === "error"
                        ? 2
                        : 0;
            // If the message has docsUrl, try to link to docsUrl
            const messageId = enableTerminalLink && message.docsUrl
                ? terminal_link_1.default(message.messageId, message.docsUrl, {
                    fallback: (text, _url) => {
                        return text;
                    },
                })
                : message.messageId;
            return {
                // Preset rule format
                // {preset-id} > {rule-id}
                // Single rule format
                // {rule-id}
                ruleId: message.ruleParentId ? `${message.ruleParentId} > ${message.ruleId}` : message.ruleId,
                index: message.range[0],
                line: message.loc.start.line,
                column: message.loc.start.column,
                severity: severityLevel,
                message: `[${messageId}] ${message.message}`,
                data: message.data,
                // NO NEED - DUMMY DATA
                fix: undefined,
                type: "lint",
            };
        }),
    };
};
function createFormatter(formatterConfig) {
    var _a;
    const formatterName = formatterConfig.formatterName;
    const isHumanReadableFormat = ["stylish", "pretty-error"].includes(formatterName);
    /**
     * Terminal Link is enabled when use human-readable format and option is enabled
     */
    const enableTerminalLink = (_a = isHumanReadableFormat !== null && isHumanReadableFormat !== void 0 ? isHumanReadableFormat : formatterConfig.terminalLink) !== null && _a !== void 0 ? _a : false;
    debug(`formatterName: ${formatterName}`);
    try {
        const format = secretlintCreateFormatter(formatterConfig);
        return {
            format: (results) => {
                return format(results);
            },
        };
    }
    catch (_b) {
        const format = linter_formatter_1.createFormatter(formatterConfig);
        return {
            format: (results) => {
                return format(results.map((result) => convertSecretLintResultToTextlintResult(result, {
                    enableTerminalLink,
                })));
            },
        };
    }
}
exports.createFormatter = createFormatter;
function secretlintCreateFormatter(formatterConfig) {
    const formatterName = formatterConfig.formatterName;
    debug(`formatterName: ${formatterName}`);
    let formatter;
    let formatterPath;
    if (fs_1.default.existsSync(formatterName)) {
        formatterPath = formatterName;
    }
    else if (fs_1.default.existsSync(path_1.default.resolve(process.cwd(), formatterName))) {
        formatterPath = path_1.default.resolve(process.cwd(), formatterName);
    }
    else {
        if (is_file_1.default(`${path_1.default.join(__dirname, "formatters/", formatterName)}.js`)) {
            formatterPath = `${path_1.default.join(__dirname, "formatters/", formatterName)}.js`;
        }
        else if (is_file_1.default(`${path_1.default.join(__dirname, "formatters/", formatterName)}.ts`)) {
            formatterPath = `${path_1.default.join(__dirname, "formatters/", formatterName)}.ts`;
        }
        else {
            const pkgPath = try_resolve_1.default(`secretlint-formatter-${formatterName}`) || try_resolve_1.default(formatterName);
            if (pkgPath) {
                formatterPath = pkgPath;
            }
        }
    }
    try {
        formatter = module_interop_1.moduleInterop(require(formatterPath));
    }
    catch (ex) {
        throw new Error(`Could not find formatter ${formatterName}
${ex}`);
    }
    return function (results) {
        return formatter(results, formatterConfig);
    };
}
exports.secretlintCreateFormatter = secretlintCreateFormatter;
function getFormatterList() {
    const textlintFormatters = linter_formatter_1.getFormatterList();
    const secretlintFormatters = secretlintGetFormatterList();
    const secretlintFormatterNames = secretlintFormatters.map((formatter) => formatter.name);
    const externalFormatters = textlintFormatters.filter((formatter) => !secretlintFormatterNames.includes(formatter.name));
    return [...externalFormatters, ...secretlintFormatters];
}
exports.getFormatterList = getFormatterList;
function secretlintGetFormatterList() {
    return fs_1.default
        .readdirSync(path_1.default.join(__dirname, "formatters"))
        .filter((file) => {
        return [".js", ".ts"].some((formatterExtension) => path_1.default.extname(file) === formatterExtension);
    })
        .map((file) => {
        const nameWithoutExtension = [".js", ".ts"].reduce((name, extension) => path_1.default.basename(name, extension), file);
        return { name: nameWithoutExtension };
    });
}
exports.secretlintGetFormatterList = secretlintGetFormatterList;
//# sourceMappingURL=index.js.map