"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.creator = exports.messages = void 0;
const regexp_string_matcher_1 = require("@textlint/regexp-string-matcher");
exports.messages = {
    PackageJSON_xOauthToken: {
        en: (props) => `found GitHub Token: ${props.TOKEN}`,
        ja: (props) => `GitHub Token: ${props.TOKEN} がみつかりました`,
    },
    Npmrc_authToken: {
        en: (props) => `found npmrc authToken: ${props.TOKEN}`,
        ja: (props) => `npmrc authToken: ${props.TOKEN} がみつかりました`,
    },
};
function reportIfFoundXOauthGitHubToken({ source, options, context, t, }) {
    // https://github.blog/2012-09-21-easier-builds-and-deployments-using-git-over-https-and-oauth/
    const XOAuthPattern = /https?:\/\/(.*?):x-oauth-basic@github.com.*/g;
    const results = source.content.matchAll(XOAuthPattern);
    for (const result of results) {
        const index = result.index || 0;
        const match = result[1] || "";
        const range = [index, index + match.length];
        const allowedResults = regexp_string_matcher_1.matchPatterns(match, options.allows);
        if (allowedResults.length > 0) {
            continue;
        }
        context.report({
            message: t("PackageJSON_xOauthToken", {
                TOKEN: match,
            }),
            range,
        });
    }
}
function reportIfFound_AuthTokenInNpmrc({ source, options, context, t, }) {
    // https://blog.npmjs.org/post/118393368555/deploying-with-npm-private-modules
    const AuthTokenPattern = /_authToken=(.*)/g;
    const results = source.content.matchAll(AuthTokenPattern);
    for (const result of results) {
        const index = result.index || 0;
        const match = result[1] || "";
        const range = [index, index + match.length];
        const allowedResults = regexp_string_matcher_1.matchPatterns(match, options.allows);
        if (allowedResults.length > 0) {
            continue;
        }
        context.report({
            message: t("Npmrc_authToken", {
                TOKEN: match,
            }),
            range,
        });
    }
}
const isPackageFile = (filePath) => {
    if (!filePath) {
        return true;
    }
    return filePath.endsWith("package.json") || filePath.endsWith("package-lock.json");
};
const isNpmrc = (filePath) => {
    if (!filePath) {
        return true;
    }
    return filePath.endsWith(".npmrc");
};
exports.creator = {
    messages: exports.messages,
    meta: {
        id: "@secretlint/secretlint-rule-npm",
        recommended: true,
        type: "scanner",
        supportedContentTypes: ["text"],
        docs: {
            url: "https://github.com/secretlint/secretlint/blob/master/packages/%40secretlint/secretlint-rule-npm/README.md",
        },
    },
    create(context, options) {
        const t = context.createTranslator(exports.messages);
        const normalizedOptions = {
            allows: options.allows || [],
        };
        return {
            file(source) {
                if (isPackageFile(source.filePath)) {
                    reportIfFoundXOauthGitHubToken({ source, options: normalizedOptions, context, t });
                }
                else if (isNpmrc(source.filePath)) {
                    reportIfFound_AuthTokenInNpmrc({ source, options: normalizedOptions, context, t });
                }
            },
        };
    },
};
exports.default = exports.creator;
//# sourceMappingURL=index.js.map