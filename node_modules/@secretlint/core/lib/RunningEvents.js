"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRunningEvents = void 0;
const promise_event_emitter_1 = require("./helper/promise-event-emitter");
const SecretLintRuleImpl_1 = require("./SecretLintRuleImpl");
const profiler_1 = require("@secretlint/profiler");
const createRunningEvents = () => {
    const contextEvents = new promise_event_emitter_1.PromiseEventEmitter();
    const registerSet = new Set();
    const LINT_HANDLE = Symbol("lint:start");
    const rules = [];
    return {
        collectAllowMessageIds() {
            const allowMessageIds = [];
            rules.forEach((rule) => {
                allowMessageIds.push(...rule.allowMessageIds());
            });
            return allowMessageIds;
        },
        /**
         * Start to run linting
         * @param options
         */
        runLint(options) {
            return contextEvents.emit(LINT_HANDLE, options);
        },
        registerRule({ descriptorRule, context, }) {
            if (registerSet.has(descriptorRule.id)) {
                // TODO: more trivial implementation
                throw new Error(`rule.id:${descriptorRule.id} is already registered.
                
Duplicated rule.id is something wrong in .secretlintrc.                
`);
            }
            registerSet.add(descriptorRule.id);
            const rule = new SecretLintRuleImpl_1.SecretLintRule({
                descriptorRule: descriptorRule,
                context,
            });
            rules.push(rule);
            contextEvents.on(LINT_HANDLE, ({ sourceCode }) => __awaiter(this, void 0, void 0, function* () {
                // TODO: add more handler
                // Call O￿￿rder?
                // - file
                profiler_1.secretLintProfiler.mark({
                    type: "@core>rule-handler::start",
                    id: descriptorRule.rule.meta.id,
                });
                // if this rule support the content type
                if (rule.supportSourceCode(sourceCode)) {
                    yield rule.file(sourceCode);
                }
                profiler_1.secretLintProfiler.mark({
                    type: "@core>rule-handler::end",
                    id: descriptorRule.rule.meta.id,
                });
            }));
        },
        registerRulePreset({ descriptorRulePreset, context, }) {
            // Normalized Rule Preset Options
            const rulePresetCreatorOptions = descriptorRulePreset.options || [];
            // Internally, RulePreset#register call `registerRule`
            descriptorRulePreset.rule.create(context, rulePresetCreatorOptions);
        },
        isRegistered(ruleId) {
            return registerSet.has(ruleId);
        },
    };
};
exports.createRunningEvents = createRunningEvents;
//# sourceMappingURL=RunningEvents.js.map