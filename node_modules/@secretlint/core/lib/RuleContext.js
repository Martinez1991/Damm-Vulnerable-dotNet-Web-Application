"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRuleContext = exports.createContextEvents = void 0;
const events_1 = require("events");
const SecretLintRuleMessageTranslator_1 = require("./helper/SecretLintRuleMessageTranslator");
const createContextEvents = () => {
    const contextEvents = new events_1.EventEmitter();
    const REPORT_SYMBOL = Symbol("report");
    const IGNORE_SYMBOL = Symbol("ignore");
    return {
        report(descriptor) {
            contextEvents.emit(REPORT_SYMBOL, descriptor);
        },
        onReport(handler) {
            const listener = (descriptor) => {
                handler(descriptor);
            };
            contextEvents.on(REPORT_SYMBOL, listener);
            return () => {
                contextEvents.off(REPORT_SYMBOL, listener);
            };
        },
        ignore(descriptor) {
            contextEvents.emit(IGNORE_SYMBOL, descriptor);
        },
        onIgnore(handler) {
            const listener = (descriptor) => {
                handler(descriptor);
            };
            contextEvents.on(IGNORE_SYMBOL, listener);
            return () => {
                contextEvents.off(IGNORE_SYMBOL, listener);
            };
        },
    };
};
exports.createContextEvents = createContextEvents;
const createRuleContext = ({ ruleId, ruleParentId, meta, severity, sourceCode, contextEvents, sharedOptions, locale, }) => {
    return {
        sharedOptions: sharedOptions,
        createTranslator: (messages) => {
            return SecretLintRuleMessageTranslator_1.createTranslator(messages, {
                defaultLocale: locale,
            });
        },
        ignore(descriptor) {
            const { message } = descriptor.message;
            contextEvents.ignore({
                ruleId: ruleId,
                ruleParentId,
                range: descriptor.range,
                targetRuleId: descriptor.targetRuleId,
                loc: sourceCode.rangeToLocation(descriptor.range),
                message: message,
            });
        },
        report(descriptor) {
            var _a, _b;
            const { message, messageId, data } = descriptor.message;
            // Default severity level is "error"
            const severityLevel = severity !== null && severity !== void 0 ? severity : "error";
            if (ruleParentId) {
                contextEvents.report(Object.assign(Object.assign({}, descriptor), { ruleId: ruleId, ruleParentId, loc: sourceCode.rangeToLocation(descriptor.range), severity: severityLevel, message,
                    messageId, docsUrl: ((_a = meta.docs) === null || _a === void 0 ? void 0 : _a.url) ? `${meta.docs.url}#${messageId}` : undefined, data }));
            }
            else {
                contextEvents.report(Object.assign(Object.assign({}, descriptor), { ruleId: ruleId, loc: sourceCode.rangeToLocation(descriptor.range), severity: severityLevel, message,
                    messageId, docsUrl: ((_b = meta.docs) === null || _b === void 0 ? void 0 : _b.url) ? `${meta.docs.url}#${messageId}` : undefined, data }));
            }
        },
    };
};
exports.createRuleContext = createRuleContext;
//# sourceMappingURL=RuleContext.js.map