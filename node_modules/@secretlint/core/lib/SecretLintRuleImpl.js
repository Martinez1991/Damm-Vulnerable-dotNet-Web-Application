"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretLintRule = void 0;
class SecretLintRule {
    constructor({ descriptorRule, context }) {
        this.descriptorRule = descriptorRule;
        this.ruleCreator = descriptorRule.rule;
        // normalize rule options
        const ruleCreatorOptions = descriptorRule.options || {};
        this.ruleReportHandle = this.ruleCreator.create(context, ruleCreatorOptions);
    }
    allowMessageIds() {
        if (!this.descriptorRule.allowMessageIds) {
            return [];
        }
        const ruleId = this.ruleCreator.meta.id;
        return this.descriptorRule.allowMessageIds.map((allowMessageId) => {
            return {
                messageId: allowMessageId,
                ruleId,
            };
        });
    }
    supportSourceCode(sourceCode) {
        const contentType = sourceCode.contentType;
        if (contentType === "unknown") {
            return true;
        }
        if (this.ruleCreator.meta.supportedContentTypes.includes("all")) {
            return true;
        }
        return this.ruleCreator.meta.supportedContentTypes.includes(contentType);
    }
    file(source) {
        return __awaiter(this, void 0, void 0, function* () {
            const file = this.ruleReportHandle.file;
            if (!file) {
                return;
            }
            return file(source);
        });
    }
}
exports.SecretLintRule = SecretLintRule;
//# sourceMappingURL=SecretLintRuleImpl.js.map