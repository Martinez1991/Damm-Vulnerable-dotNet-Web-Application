import { SecretLintSourceIdentifierNode } from "./SecretLintSource";
import { SecretLintRuleLocalizeMessages, SecretLintRuleMessageTranslate, SecretLintRuleMessageTranslateResult } from "./SecretLintRuleTranslator";
import { SecretLintSourceCode } from "./SecretLintSourceCode";
import { SecretlintCoreSharedOptions } from "./SecretlintCoreSharedOptions";
export declare type SecretLintRuleReportDescriptor = {
    message: SecretLintRuleMessageTranslateResult<any>;
    range: number[];
    data?: {};
};
export declare type SecretLintRuleIgnoreDescriptor = {
    message: SecretLintRuleMessageTranslateResult<any>;
    /**
     *  Specify target rule id is ignored.
     *  If Set "*", match any rule id.
     *  Examples:
     *  { targetRuleId: "@secretlint/secretelint-rule-example" }
     *  { targetRuleId: "*" }
     */
    targetRuleId: string;
    range: number[];
};
export declare type SecretLintRuleContext = {
    sharedOptions: SecretlintCoreSharedOptions;
    createTranslator<T extends SecretLintRuleLocalizeMessages>(messages: T): SecretLintRuleMessageTranslate<T>;
    report(descriptor: SecretLintRuleReportDescriptor): void;
    ignore(descriptor: SecretLintRuleIgnoreDescriptor): void;
};
export declare type SecretLintRuleCreatorOptions = {};
export declare type SecretLintRuleContentType = "binary" | "text" | "all";
export declare type SecretLintRuleCreator<Options = SecretLintRuleCreatorOptions> = {
    messages: SecretLintRuleLocalizeMessages;
    meta: {
        id: string;
        type: "scanner" | "filter";
        recommended: boolean;
        docs?: {
            url: string;
        };
        supportedContentTypes: SecretLintRuleContentType[];
    };
    create(context: SecretLintRuleContext, options: Options): SecretLintRuleReportHandler;
};
export declare type SecretLintRuleReportHandler = {
    file?(source: SecretLintSourceCode): void | Promise<any>;
    identifier?(node: SecretLintSourceIdentifierNode, source: SecretLintSourceCode): void | Promise<any>;
};
