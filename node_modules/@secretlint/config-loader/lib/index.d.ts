import { SecretLintConfigDescriptor, SecretLintCoreDescriptor, SecretLintUnionRuleCreator } from "@secretlint/types";
export declare type SecretLintConfigLoaderOptions = {
    cwd?: string;
    configFilePath?: string;
    /**
     * node_modules directory path
     * Default: undefined
     */
    node_moduleDir?: string;
    /**
     * This definitions replace id to rule module
     * It is useful for replacing specific ruleId with specific rule module.
     * Main use-case is tester.
     */
    testReplaceDefinitions?: {
        id: string;
        rule: SecretLintUnionRuleCreator;
    }[];
};
export declare type SecretLintConfigLoaderResult = {
    ok: true;
    config: SecretLintCoreDescriptor;
    configFilePath: string;
} | {
    ok: false;
    configFilePath?: string;
    rawConfig?: SecretLintConfigDescriptor;
    errors: Error[];
};
export declare type SecretLintConfigLoaderRawResult = {
    ok: true;
    configFilePath: string;
    rawConfig: SecretLintConfigDescriptor;
} | {
    ok: false;
    errors: Error[];
};
export declare type SecretLintLoadPackagesFromRawConfigOptions = {
    /**
     * Loaded config object
     */
    rawConfig: SecretLintConfigDescriptor;
    /**
     * node_modules directory path
     * Default: undefined
     */
    node_moduleDir?: string;
    /**
     * This definitions replace id to rule module
     * It is useful for replacing specific ruleId with specific rule module.
     * Main use-case is tester.
     */
    testReplaceDefinitions?: {
        id: string;
        rule: SecretLintUnionRuleCreator;
    }[];
};
export declare type SecretLintLoadPackagesFromRawConfigResult = {
    ok: true;
    config: SecretLintCoreDescriptor;
} | {
    ok: false;
    errors: Error[];
};
/**
 * Load packages in RawConfig and return loaded config object
 * @param options
 */
export declare const loadPackagesFromRawConfig: (options: SecretLintLoadPackagesFromRawConfigOptions) => SecretLintLoadPackagesFromRawConfigResult;
/**
 *  Load config file and return config object that is loaded rule instance.
 * @param options
 */
export declare const loadConfig: (options: SecretLintConfigLoaderOptions) => SecretLintConfigLoaderResult;
/**
 *  Load config file and return config object that is not loaded rule instance
 *  It is just JSON present for config file. Raw data
 * @param options
 */
export declare const loadRawConfig: (options: SecretLintConfigLoaderOptions) => SecretLintConfigLoaderRawResult;
