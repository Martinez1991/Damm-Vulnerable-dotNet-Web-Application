"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runConfigCreator = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const globby_1 = __importDefault(require("globby"));
const read_pkg_1 = __importDefault(require("read-pkg"));
const config_creator_1 = require("@secretlint/config-creator");
const runConfigCreator = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const existingConfigFiles = yield globby_1.default(`${options.cwd}/.secretlintrc*`);
    if (existingConfigFiles.length > 0) {
        return {
            exitStatus: 1,
            stdout: null,
            stderr: new Error("secretlint config file is already existed."),
        };
    }
    const configFilePath = path_1.default.join(options.cwd, ".secretlintrc.json");
    const pkg = yield read_pkg_1.default({
        cwd: options.cwd,
    });
    const configDescriptor = config_creator_1.createConfig({ packageJSON: pkg });
    fs_1.default.writeFileSync(configFilePath, JSON.stringify(configDescriptor, null, 2) + "\n", "utf-8");
    return {
        exitStatus: 0,
        stdout: `Create ${configFilePath}`,
        stderr: null,
    };
});
exports.runConfigCreator = runConfigCreator;
//# sourceMappingURL=create-secretlintrc.js.map