"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchFiles = void 0;
const globby_1 = __importDefault(require("globby"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const debug = require("debug")("secretlint");
const DEFAULT_IGNORE_PATTERNS = Object.freeze([
    "**/.git/**",
    "**/node_modules/**",
    "**/.secretlintrc/**",
    "**/.secretlintrc.{json,yaml,yml,js}/**",
    "**/.secretlintignore*/**",
]);
/**
 * root option support of https://github.com/isaacs/node-glob#options
 * /packages -> packages
 * fast-glob ignore /dir. It is workaround.
 * @param filePath
 */
const replaceRootDir = (filePath) => {
    if (filePath[0] === path_1.default.sep) {
        return filePath.slice(1);
    }
    return filePath;
};
const mapGitIgnorePatternTo = (base) => (ignore) => {
    if (ignore.startsWith("!")) {
        return "!" + path_1.default.posix.join(base, ignore.slice(1));
    }
    return replaceRootDir(path_1.default.posix.join(base, ignore));
};
/**
 * globby wrapper that support ignore options
 * @param patterns
 * @param options
 */
const searchFiles = (patterns, options) => __awaiter(void 0, void 0, void 0, function* () {
    const ignoredPatterns = [];
    ignoredPatterns.push(...DEFAULT_IGNORE_PATTERNS);
    if (options.ignoreFilePath) {
        const baseDir = path_1.default.relative(options.cwd, path_1.default.dirname(options.ignoreFilePath));
        const normalizeIgnoreFilePath = path_1.default.resolve(options.cwd, options.ignoreFilePath);
        debug("searchFiles ignore baseDir: %s, normalizeIgnoreFilePath: %s", baseDir, normalizeIgnoreFilePath);
        if (fs_1.default.existsSync(normalizeIgnoreFilePath)) {
            const ignored = fs_1.default
                .readFileSync(normalizeIgnoreFilePath, "utf-8")
                .split(/\r?\n/)
                .filter((line) => !/^\s*$/.test(line) && !/^\s*#/.test(line))
                .map(mapGitIgnorePatternTo(baseDir));
            debug("ignored: %o", ignored);
            ignoredPatterns.push(...ignored);
        }
    }
    debug("search patterns: %o", patterns);
    debug("search ignore patterns: %o", ignoredPatterns);
    const searchResultItems = yield globby_1.default(patterns, {
        cwd: options.cwd,
        ignore: ignoredPatterns,
        dot: true,
        absolute: true,
    });
    if (searchResultItems.length > 0) {
        return {
            ok: true,
            items: searchResultItems,
        };
    }
    /**
     * If globby result with ignoring is empty and globby result is not empty, Secretlint suppress "not found target file" error.
     * It is valid case.
     * It aim to avoid error that is caused by ignore files and not found target file.
     * TODO: This is also performance issue. we need to more reasonable mechanism.
     */
    const isEmptyResultIsHappenByIgnoring = (yield globby_1.default(patterns, {
        cwd: options.cwd,
        dot: true,
    })).length > 0;
    return {
        ok: isEmptyResultIsHappenByIgnoring,
        items: [],
    };
});
exports.searchFiles = searchFiles;
//# sourceMappingURL=search.js.map